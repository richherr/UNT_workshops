---
title: "Using Containers on TACC LoneStar6"
subtitle: "Reproducibility and Portability of Workflows"
author: "Rich Herrington <br> DRI, Research Computing Services"
format: 
  revealjs: 
    theme: white
    transition: slide
    self-contained: true
code-tools: true
incremental: true
title-slide-attributes: 
  data-background-image: unt.png
  data-background-size: 23%
  data-background-position: 2% 2%
editor: 
  markdown: 
    wrap: 72
---

# Slide URL

[https://richherr.github.io/UNT_workshops/](https://richherr.github.io/UNT_workshops/){style="font-size: 1.25em"}

## Setup 
1. We need to do some intial setup to work with containers on LS6.
- Create temp locations for downloads and builds.

::: fragment
``` bash
login1.ls6$ ssh richherr@ls6.tacc.utexas.edu
login2.ls6$ pwd
/home1/07723/richherr
login1.ls6$ cd /scratch/07723/richherr
login1.ls6$ mkdir -p tmp/.apptainer
login1.ls6$ mkdir /home1/07723/richherr/work/containers
login1.ls6$ cd /home1/07723/richherr/work/containers
login1.ls6$ echo export "APPTAINER_CACHEDIR=/scratch/07723/richherr/tmp/.apptainer" >> ~/.bashrc
login1.ls6$ echo export "APPTAINER_LOCALCACHEDIR=/scratch/07723/richherr/tmp/.apptainer" >> ~/.bashrc
login1.ls6$ echo export "APPTAINER_TMPDIR=/scratch/07723/richherr/tmp/.apptainer" >> ~/.bashrc
login1.ls6$ echo export "APPTAINER_PULLFOLDER=/scratch/07723/richherr/tmp/.apptainer" >> ~/.bashrc
login1.ls6$ source ~/.bashrc
```
:::

## Requesting an Interactive Bash Session on a Compute Node {.smaller style="font-size: 0.80em"}

2. We need to request an interactive session on a compute node.  We'll use the development partition.  TACC doesn't allow the use of Apptainer on login nodes. 

::: fragment
``` bash
login1.ls6$ srun -p development -t 02:00:00 -A TRA21001 -N 1 -n 128 --pty bash
c303-012.ls6$ pwd
/home1/07723/richherr
```
:::

## Our First Simple Container Action {.smaller style="font-size: 0.62em"}

3. We will load the apptainer module and pull a container from docker hub
- Load module to access apptainer
- Do apptainer pull from docker hub
- Move the container from our temp directory to our container directory

::: fragment
``` bash
c303-012.ls6$ module load apptainer
c303-012.ls6$ apptainer pull my_debian.sif docker://debian:latest
c303-012.ls6$ mv /scratch/07723/richherr/tmp/.apptainer/my_debian.sif /work/07723/richherr/containers/
c303-012.ls6$ cd /work/07723/richherr/containers/
c303-012.ls6$ pwd
/home1/07723/richherr/work/containers
c303-012.ls6$ ls -la
total 46644
drwx------  2 richherr G-824114     4096 Oct  9 20:44 .
drwx------ 46 richherr G-824114     4096 Oct  9 20:24 ..
-rwx------  1 richherr G-824114 47751168 Oct  9 20:39 my_debian.sif
```
:::
 
## Interacting with the Container Using **shell** {.smaller style="font-size: 0.68em"}

2. We can interact with the container by using the shell command. With shell, you are inside the container's environment.
- **apptainer shell** is like "entering" the container
- We can see that the environment is different from an ordinary bash shell on the login node

::: fragment
``` bash
c303-012.ls6$ apptainer shell my_debian.sif
Apptainer> cat /etc/os-release

PRETTY_NAME="Debian GNU/Linux 12 (bookworm)"
NAME="Debian GNU/Linux"
VERSION_ID="12"
VERSION="12 (bookworm)"

login1.ls6$ cat /etc/os-release

NAME="Rocky Linux"
VERSION="8.6 (Green Obsidian)"
ID="rocky"
ID_LIKE="rhel centos fedora"
VERSION_ID="8.6"
```
:::

## Many Many Containers to Choose From {.smaller style="font-size: 0.68em"}

3. Let's pick a container that has more interesting tools to use. 
- From: [https://jupyter-docker-stacks.readthedocs.io/en/latest/index.html](https://jupyter-docker-stacks.readthedocs.io/en/latest/index.html)
- Select: [https://hub.docker.com/r/jupyter/datascience-notebook](https://hub.docker.com/r/jupyter/datascience-notebook)
- Containers can be small (less than 1 GB) or large (several GB) and the conversion to an apptainer image (.sif) format can be relatively quick or take substantially longer. 

::: fragment
``` bash
apptainer pull jupyter_datascience.sif docker://jupyter/datascience-notebook

```
:::



