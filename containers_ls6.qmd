---
title: "Using Containers on TACC LoneStar6"
subtitle: "Reproducibility and Portability of Workflows"
author: "Rich Herrington <br> DRI, Research Computing Services"
format: 
  revealjs: 
    theme: white
    transition: slide
    self-contained: true
code-tools: true
incremental: true
title-slide-attributes: 
  data-background-image: unt.png
  data-background-size: 23%
  data-background-position: 2% 2%
editor: 
  markdown: 
    wrap: 72
---

# Slide URL

[https://richherr.github.io/UNT_workshops/](https://richherr.github.io/UNT_workshops/){style="font-size: 1.25em"}

## Setup 
1. We need to do some intial setup to work with containers on LS6.
- Create temp locations for downloads and builds.

::: fragment
``` bash
login1.ls6$ ssh richherr@ls6.tacc.utexas.edu
login2.ls6$ pwd
/home1/07723/richherr
login1.ls6$ cd /scratch/07723/richherr
login1.ls6$ mkdir -p tmp/.apptainer
login1.ls6$ mkdir /home1/07723/richherr/work/containers
login1.ls6$ cd /home1/07723/richherr/work/containers
login1.ls6$ echo export "APPTAINER_CACHEDIR=/scratch/07723/richherr/tmp/.apptainer" >> ~/.bashrc
login1.ls6$ echo export "APPTAINER_LOCALCACHEDIR=/scratch/07723/richherr/tmp/.apptainer" >> ~/.bashrc
login1.ls6$ echo export "APPTAINER_TMPDIR=/scratch/07723/richherr/tmp/.apptainer" >> ~/.bashrc
login1.ls6$ echo export "APPTAINER_PULLFOLDER=/scratch/07723/richherr/tmp/.apptainer" >> ~/.bashrc
login1.ls6$ source ~/.bashrc
```
:::

## Requesting an Interactive Bash Session on a Compute Node {.smaller style="font-size: 0.70em"}

2. We need to request an interactive session on a compute node.  We'll use the development partition.  TACC doesn't allow the use of Apptainer on login nodes. 
- While we start with an interactive sessions, containers can be used with SLURM batch as well. 

::: fragment
``` bash
login1.ls6$ srun -p development -t 02:00:00 -A TRA21001 -N 1 -n 128 --pty bash
c303-012.ls6$ pwd
/home1/07723/richherr
```
:::

::: {.fragment}
::: {.callout-tip}
You can also use the command **idev** to get an interactive session
``` bash
login1.ls6$ module load idev
login1.ls6$ idev -m 120 -A TRA21001
```
:::
:::



## Our First Simple Container Action {.smaller style="font-size: 0.62em"}

3. We will load the apptainer module and pull a container from docker hub
- Load module to access apptainer
- Do apptainer pull from docker hub
- Move the container from our temp directory to our container directory

::: fragment
``` bash
c303-012.ls6$ module load tacc-apptainer
c303-012.ls6$ apptainer pull my_debian.sif docker://debian:latest
c303-012.ls6$ mv /scratch/07723/richherr/tmp/.apptainer/my_debian.sif /work/07723/richherr/containers/
c303-012.ls6$ cd /work/07723/richherr/containers/
c303-012.ls6$ pwd
/home1/07723/richherr/work/containers
c303-012.ls6$ ls -la
total 46644
drwx------  2 richherr G-824114     4096 Oct  9 20:44 .
drwx------ 46 richherr G-824114     4096 Oct  9 20:24 ..
-rwx------  1 richherr G-824114 47751168 Oct  9 20:39 my_debian.sif
```
:::
 
## Interacting with the Container Using [shell]{style="color: red;"} {.smaller style="font-size: 0.68em"}

2. We can interact with the container by using the shell command. With shell, you are inside the container's environment.
- **apptainer shell** is like "entering" the container
- We can see that the environment is different from an ordinary bash shell on the login node

::: fragment
``` bash
c303-012.ls6$ apptainer shell my_debian.sif
Apptainer> cat /etc/os-release

PRETTY_NAME="Debian GNU/Linux 12 (bookworm)"
NAME="Debian GNU/Linux"
VERSION_ID="12"
VERSION="12 (bookworm)"

login1.ls6$ cat /etc/os-release

NAME="Rocky Linux"
VERSION="8.6 (Green Obsidian)"
ID="rocky"
ID_LIKE="rhel centos fedora"
VERSION_ID="8.6"
```
:::

## Many Containers to Choose From {.smaller style="font-size: 0.68em"}

3. Let's pick a container that has more interesting tools to use.  Go to the Docker Hub website and search for the docker image "rocker/rstudio".
[https://hub.docker.com/](https://hub.docker.com/)
- Information on the container: 
[https://rocker-project.org/images/versioned/rstudio.html](https://rocker-project.org/images/versioned/rstudio.html)
- The .sif image file is 594M and took about 5 minutes to download and create. 

::: fragment
``` bash
c303-012.ls6$ module load tacc-apptainer
c303-012.ls6$ apptainer pull docker://rocker/rstudio
INFO:    Converting OCI blobs to SIF format
INFO:    Starting build...
Getting image source signatures
...
...
INFO:    Creating SIF file...
c303-012.ls6$ mv /scratch/07723/richherr/tmp/.apptainer/rstudio_latest.sif /work/07723/richherr/containers/
c303-012.ls6(742)$ cd /work/07723/richherr/containers/
c303-012.ls6(742)$ ls -lha
total 640M
drwx------  2 richherr G-824114 4.0K Oct 10 13:03 .
drwx------ 46 richherr G-824114 4.0K Oct  9 23:19 ..
-rwx------  1 richherr G-824114  46M Oct  9 20:39 my_debian.sif
-rwx------  1 richherr G-824114 594M Oct 10 13:01 rstudio_latest.sif
```
:::

## Interacting with our Container Using [shell (R)]{style="color: red;"} {.smaller style="font-size: 0.68em"}

4. We can interact with our container using **apptainer shell**

- We really only need to load the module for apptainer once so I'll stop loading it before each code segment. 
- Here we run an interactive session with R version 4.3.1

::: fragment
``` bash
c303-012.ls6$ c303-012.ls6(823)$ pwd
/home1/07723/richherr/work/containers
c303-012.ls6$ apptainer shell rstudio_latest.sif

Apptainer> R

R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

Type 'q()' to quit R.

>
```
:::

## Interacting with our Container Using [shell (Python)]{style="color: red;"} {.smaller style="font-size: 0.68em"}

- We can also use our Conda environments from within the container!
- Here we load the base environment and start python from that environment. 
- Note that python is not installed in the container but we are accessing python by loading our conda environment.
- We can even install software into our conda environment from within the container.

::: fragment
``` bash
c303-012.ls6$ apptainer shell rstudio_latest.sif
Apptainer> source ~/conda.init
Apptainer> conda activate
(base) Apptainer> which python
/work/07723/richherr/miniconda3/bin/python
(base) Apptainer> python
Python 3.8.17 | packaged by conda-forge | (default, Jun 16 2023, 07:06:00)
[GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>

(base) Apptainer> mamba install htop
```
:::

## Interacting with our Container Using [exec (R)]{style="color: red;"}  {.smaller style="font-size: 0.68em"}

5. We can interact with our container using **apptainer exec** (R)

- Here we send a executable script to the R language in the container using **exec** 
- We first need to create a **test.R** text file (use nano) with a simple single R command in it - let's use **rnorm(10)** - this generates 10 random draws from the normal distribution. 
- Remember to make the test.R an executable file by using **chmod +x**

::: fragment
``` bash
c303-012.ls6$ nano test.R
c303-012.ls6$ chmod +x test.R
c303-012.ls6$ more test.R
rnorm(10)

apptainer exec rstudio_latest.sif Rscript test.R
 [1] -0.83928324  0.38760952 -0.10603479 -0.39473706 -1.37026012  0.65444678
 [7] -1.41737121  0.41543348  0.04030247 -0.93155394
c303-012.ls6$
```
:::

## Interacting with our Container Using [exec (Python)]{style="color: red;"} {.smaller style="font-size: 0.60em"}

- Here we send a executable script to the Python language in the container using **exec**, but only after we have initialized our conda environment.
- We first need to create a **test.py** text file (use nano) with a simple single python command in it - let's use a simple 'hello world' - remember to make the test.py an executable file by using **chmod +x**
- The setup for this is a bit more complicated since Python is not installed in the container. We'll need to create **submit_py** script and a **test.py** separatly.  The **submit_py** will initialize our conda environment and then submit the **test.py** python script.  
- Lastly, make sure to give the full path to the **submit_py** script

::: fragment
``` bash
c303-012.ls6$ nano test.py
c303-012.ls6$ chmod +x test.py
c303-012.ls6$ more test.py
#!/usr/bin/env python3
print('hello world')

c303-012.ls6$ nano submit_py
c303-012.ls6$ chmod +x submit_py
c303-012.ls6$ more submit_py
#!/bin/bash
source /home1/07723/richherr/conda.init
conda activate

c303-012.ls6$ apptainer exec rstudio_latest.sif /work/07723/richherr/containers/submit_py
hello world
```
:::







